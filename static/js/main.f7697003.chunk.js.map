{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","pages/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","to","TodoForm","props","ref","useRef","type","id","placeholder","onKeyPress","event","key","onAdd","current","value","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","cls","completed","push","join","checked","onChange","bind","title","onClick","preventDefault","removeHandler","TodosPage","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","trim","newTodo","Date","now","prev","window","confirm","filter","AboutPage","history","useHistory","App","component","path","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAGaA,EAAkC,kBAC3C,6BACI,yBAAKC,UAAU,oCACX,uBAAGC,KAAK,IAAID,UAAU,cAAtB,sBACA,wBAAIA,UAAU,8BACV,4BACI,kBAAC,IAAD,CAASE,GAAG,KAAZ,cAEJ,4BACI,kBAAC,IAAD,CAASA,GAAG,UAAZ,c,wBCNPC,EAAoC,SAAAC,GAE7C,IAAMC,EAAMC,iBAAyB,MAarC,OACI,yBAAKN,UAAU,oBACX,2BAGIK,IAAKA,EACLE,KAAK,OACLC,GAAG,QACHC,YAAY,kBACZC,WAhBY,SAACC,GACH,UAAdA,EAAMC,MACNR,EAAMS,MAAMR,EAAIS,QAASC,OACzBV,EAAIS,QAASC,MAAQ,OAerB,2BAAOC,QAAQ,QAAQhB,UAAU,UAAjC,qBCvBCiB,EAAoC,SAAC,GAIxC,IAHJC,EAGG,EAHHA,MACAC,EAEG,EAFHA,SACAC,EACG,EADHA,SAGF,GAAqB,IAAjBF,EAAMG,OACN,OAAO,uBAAGrB,UAAU,UAAb,yBAQT,OACE,4BACKkB,EAAMI,KAAI,SAAAC,GACP,IAAMC,EAAM,CAAC,QAKb,OAHGD,EAAKE,WACJD,EAAIE,KAAK,aAGT,wBAAI1B,UAAWwB,EAAIG,KAAK,KAAMf,IAAKW,EAAKf,IACpC,+BACI,2BACID,KAAK,WACLqB,QAASL,EAAKE,UACdI,SAAUT,EAASU,KAAK,KAAMP,EAAKf,MAEvC,8BAAOe,EAAKQ,OACZ,uBACI/B,UAAU,0BACVgC,QAAS,SAAArB,GAAK,OAxBpB,SAACA,EAAyBH,GAC5CG,EAAMsB,iBACNd,EAASX,GAsBiC0B,CAAcvB,EAAOY,EAAKf,MAFhD,iBCpCf2B,EAAsB,WAAO,IAAD,EACXC,mBAAkB,IADP,mBAC9BlB,EAD8B,KACvBmB,EADuB,KAGrCC,qBAAU,WACN,IAAMC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MAC1DN,EAASE,KACV,IAEHD,qBAAU,WACNI,aAAaE,QAAQ,QAASJ,KAAKK,UAAU3B,MAC9C,CAACA,IAsCN,OACI,oCACI,kBAAC,EAAD,CAAUL,MAtCG,SAACkB,GAChB,GAAqB,KAAjBA,EAAMe,OAAV,CAGA,IAAMC,EAAiB,CACnBhB,QACAvB,GAAIwC,KAAKC,MACTxB,WAAW,GAGfY,GAAS,SAAAa,GAAI,OAAKH,GAAL,mBAAiBG,WA8B5B,kBAAC,EAAD,CAAUhC,MAAOA,EACPE,SA5BM,SAACZ,GACnB6B,GAAS,SAAAa,GAAI,OACTA,EAAK5B,KAAI,SAAAC,GACL,OAAIA,EAAKf,KAAOA,EACL,eACAe,EADP,CAEIE,WAAYF,EAAKE,YAGlBF,SAoBHJ,SAfM,SAACX,GACE2C,OAAOC,QACxB,6CAGAf,GAAS,SAAAa,GAAI,OAAIA,EAAKG,QAAO,SAAA9B,GAAI,OAAIA,EAAKf,KAAOA,aC9ChD8C,EAAsB,WACjC,IAAMC,EAAUC,cAChB,OACE,oCACE,yCACE,6CACA,4BACIxD,UAAU,MACVgC,QAAS,kBAAMuB,EAAQ7B,KAAK,OAFhC,mBCWO+B,EAdO,WACpB,OACI,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKzD,UAAU,aACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0D,UAAWvB,EAAWwB,KAAK,IAAIC,OAAK,IAC3C,kBAAC,IAAD,CAAOF,UAAWJ,EAAWK,KAAK,eCD3BE,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f7697003.chunk.js","sourcesContent":["import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport const Navbar: React.FunctionComponent = () => (\r\n    <nav>\r\n        <div className=\"nav-wrapper purple darken-1 px-1\">\r\n            <a href=\"/\" className=\"brand-logo\">React + Typescript</a>\r\n            <ul className=\"right hide-on-med-and-down\">\r\n                <li>\r\n                    <NavLink to=\"/\">Todo list</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/about\">Infos</NavLink>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n)\r\n","import React, {useRef} from 'react'\r\n\r\ninterface TodoFormProps {\r\n    onAdd(title: string): void\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = props => {\r\n    //const [title, setTitle] = useState<string>('')\r\n    const ref = useRef<HTMLInputElement>(null)\r\n\r\n    // const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    //     setTitle(event.target.value)\r\n    // }\r\n\r\n    const keyPressHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === 'Enter') {\r\n            props.onAdd(ref.current!.value)\r\n            ref.current!.value = ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-field mt-2\">\r\n            <input\r\n                //onChange={changeHandler}\r\n                //value={title}\r\n                ref={ref}\r\n                type=\"text\"\r\n                id=\"title\"\r\n                placeholder=\"Input todo name\"\r\n                onKeyPress={keyPressHandler}\r\n            />\r\n            <label htmlFor=\"title\" className=\"active\">\r\n              Input todo name\r\n            </label>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {ITodo} from '../interfaces'\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[]\r\n    onToggle(id: number): void\r\n    onRemove: (id: number) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({\r\n      todos,\r\n      onRemove,\r\n      onToggle\r\n   }) => {\r\n\r\n    if (todos.length === 0) {\r\n        return <p className='center'>Here are no todos yet</p>\r\n    }\r\n\r\n    const removeHandler = (event: React.MouseEvent, id: number) => {\r\n        event.preventDefault()\r\n        onRemove(id)\r\n    }\r\n\r\n      return (\r\n        <ul>\r\n            {todos.map(todo => {\r\n                const cls = ['todo']\r\n\r\n                if(todo.completed) {\r\n                    cls.push('completed')\r\n                }\r\n                return (\r\n                    <li className={cls.join(' ')} key={todo.id}>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={todo.completed}\r\n                                onChange={onToggle.bind(null, todo.id)}\r\n                            />\r\n                            <span>{todo.title}</span>\r\n                            <i\r\n                                className=\"material-icons red-text\"\r\n                                onClick={event => removeHandler(event, todo.id)}\r\n                            >delete</i>\r\n                        </label>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport {TodoForm} from '../components/TodoForm'\r\nimport {TodoList} from '../components/TodoList'\r\nimport {ITodo} from '../interfaces'\r\n\r\nexport const TodosPage: React.FC = () => {\r\n    const [todos, setTodos] = useState<ITodo[]>([])\r\n\r\n    useEffect(() => {\r\n        const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[]\r\n        setTodos(saved)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos))\r\n    }, [todos])\r\n\r\n    const addHandler = (title: string) => {\r\n        if (title.trim() === '') {\r\n            return\r\n        }\r\n        const newTodo: ITodo = {\r\n            title,\r\n            id: Date.now(),\r\n            completed: false\r\n        }\r\n        //setTodos([newTodo, ...todos])\r\n        setTodos(prev => [newTodo, ...prev])\r\n    }\r\n\r\n    const toggleHandler = (id: number) => {\r\n        setTodos(prev =>\r\n            prev.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        completed: !todo.completed\r\n                    }\r\n                }\r\n                return todo\r\n            })\r\n        )\r\n    }\r\n\r\n    const removeHandler = (id: number) => {\r\n        const shouldRemove = window.confirm(\r\n            'Are you shure you want delete this item?'\r\n        )\r\n        if (shouldRemove) {\r\n            setTodos(prev => prev.filter(todo => todo.id !== id))\r\n        }\r\n    }\r\n\r\n  return (\r\n      <>\r\n          <TodoForm onAdd={addHandler}/>\r\n\r\n          <TodoList todos={todos}\r\n                    onToggle={toggleHandler}\r\n                    onRemove={removeHandler}\r\n          />\r\n      </>\r\n      )\r\n}","import React from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nexport const AboutPage: React.FC = () => {\r\n  const history = useHistory()\r\n  return (\r\n    <>\r\n      <h1>Info page</h1>\r\n        <p>Lorem ipsum...</p>\r\n        <button\r\n            className='btn'\r\n            onClick={() => history.push('/')}\r\n        >Back to todos</button>\r\n    </>\r\n  )\r\n}","import React from 'react'\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport { Navbar } from './components/Navbar'\nimport {TodosPage} from './pages/TodosPage'\nimport {AboutPage} from './pages/AboutPage'\n\nconst App: React.FC = () => {\n  return (\n      <BrowserRouter>\n        <Navbar />\n        <div className=\"container\">\n           <Switch>\n             <Route component={TodosPage} path='/' exact />\n             <Route component={AboutPage} path='/about' />\n           </Switch>\n        </div>\n      </BrowserRouter>\n      )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}